Michelle Ling cs161-in
Larry Cao cs161-bo

1. Because the type of messages are sent unencrypted, an attacker can change the type in a ls_msg from encrypted_message to error_message however often and whenever they want.

2. The function random_int() does not return a truly random number because it uses the function time(NULL) as the seed for the number generator. Because the number returned is completely determined by the return of time(NULL) - which is the number of seconds passed since the Epoch - an attacker can guess this value with relatively little difficulty in magnitude of about a few seconds difference. Because the master secret is generated using values generated from random_int(), then encrypted with the server’s public key, a man in the middle can receive the client and server random numbers in the unencrypted hellos sent and he can get the server’s public key from the unencrypted Server Certificate; if he then takes note of the time the premaster secret was sent, he can guess with moderate accuracy the seed for srand and continuously call rand() and encrypt numbers until he has a match with the encrypted premaster secret sent from the client to the server. He then has all the parts needed to compute the master secret.

3. The client and server hellos include a protocol which states what each member supports for block ciphers and hash functions; because these hellos are sent completely unencrypted, a man in the middle can change these to be the lowest, possibly broken version cipher suite that both the client and the server support. The client and server can exchange certificates before the hellos, that way they can encrypt their hellos with the other’s public key and sign it with their own private key so a man in the middle can’t tamper with/read them. 

4. A man in the  middle can tamper with the messages sent and both the server and client would not know - They should authenticate their messages, especially the premaster and master secrets sent (i.e. by signing the message with their private keys)
The client never sends the server any sort of acknowledgement that the handshake is now over and that they will begin using the master key before they start sending the server encrypted messages and an attacker can exploit this  to confuse the server. 